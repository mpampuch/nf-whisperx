// Global default params, used in configs
params {
    // Input options
    input                      = null
    outdir                     = './results'

    // WhisperX options
    whisperx_compute_type      = 'float32'
    whisperx_model             = 'turbo'

    // Publishing options
    publish_dir_mode           = 'copy'

    // Max resource options
    // max_memory                 = '80.GB' // My MacBook Pro 96 Gb of Memory cpus only (echo "$(sysctl -n hw.memsize) / 1024 / 1024 / 1024" | bc). Can change this on HPCs
    // max_cpus                   = 14 // My MacBook Pro has 14 cpus only (sysctl -n hw.ncpu). Can change this on HPCs
    // max_time                   = '240.h'


    // Schema validation default options
    validationFailUnrecognisedParams = false
    validationLenientMode            = false
    validationSchemaIgnoreParams     = 'genomes'
    validationShowHiddenParams       = false
    validate_params                  = true
}

// Load process configurations
includeConfig 'conf/modules.config'

// Wave configuration
wave {
    enabled = true
    strategy = ['conda','container']
}

// Container configuration
docker {
    enabled = true
    runOptions = '-u $(id -u):$(id -g)'
}

singularity {
    enabled = false
    autoMounts = true
    cacheDir = "$HOME/.singularity/cache"
}

apptainer {
    enabled = false
    autoMounts = true
    cacheDir = "$HOME/.apptainer/cache"
}

conda {
    enabled = true
    cacheDir = "$HOME/.conda/cache"
}

// Process configuration
process {
    // Global process config
    resourceLimits = [
        cpus: 14, // My MacBook Pro has 14 cpus only (sysctl -n hw.ncpu). Can change this on HPCs 
        memory: 95.GB, // My MacBook Pro 96 Gb of Memory cpus only (echo "$(sysctl -n hw.memsize) / 1024 / 1024 / 1024" | bc). Can change this on HPCs
        time: 240.h
    ]

    // Dynamic memory allocation with retry
    // cpus   = { check_max( 1    * Math.pow(2, task.attempt - 1), 'cpus'   ) }
    // memory = { check_max( 48.GB * Math.pow(2, task.attempt - 1), 'memory' ) }
    // time   = { check_max( 4.h  * Math.pow(2, task.attempt - 1), 'time'   ) }
    cpus   = { 1    * Math.pow(2, task.attempt - 1 ) } 
    memory = { 48.GB * Math.pow(2, task.attempt - 1 ) } 
    time   = { 4.h  * Math.pow(2, task.attempt - 1) } 

    errorStrategy = { task.exitStatus in ((130..145) + 104) ? 'retry' : 'finish' }
    maxRetries    = 3
    // maxErrors     = '-1'


    // Container selection for VIDEO_TO_MP3 process
    withName: VIDEO_TO_MP3 {
        container = {
            def architecture = System.getProperty("os.arch")
            def isArm = architecture.toLowerCase().contains("aarch64") || architecture.toLowerCase().contains("arm")
            
            if (workflow.containerEngine == 'singularity' || workflow.containerEngine == 'apptainer') {
                if (isArm) {
                    return 'oras://community.wave.seqera.io/library/ffmpeg:7.1.1--7374261fa7fedaee'
                } else {
                    return 'oras://community.wave.seqera.io/library/ffmpeg:7.1.1--8309d7e7e191ce33'
                }
            } else {
                if (isArm) {
                    return 'community.wave.seqera.io/library/ffmpeg:7.1.1--b28b20059d4f308c'
                } else {
                    return 'community.wave.seqera.io/library/ffmpeg:7.1.1--290457ade3b18ced'
                }
            }
        }
    }

    // Container selection for WHISPERX process
    withName: WHISPERX {
        conda = "${projectDir}/envs/whisperx.yml"
        containerOptions = '--platform=linux/amd64 --user root'
    }

    // Process-specific resource requirements
    // withLabel:process_single {
    //     cpus   = { check_max( 1                  , 'cpus'    ) }
    //     memory = { check_max( 6.GB * Math.pow(2, task.attempt - 1), 'memory'  ) }
    //     time   = { check_max( 4.h  * Math.pow(2, task.attempt - 1), 'time'    ) }
    // }
    // withLabel:process_low {
    //     cpus   = { check_max( 2     * Math.pow(2, task.attempt - 1), 'cpus'    ) }
    //     memory = { check_max( 12.GB * Math.pow(2, task.attempt - 1), 'memory'  ) }
    //     time   = { check_max( 4.h   * Math.pow(2, task.attempt - 1), 'time'    ) }
    // }
    // withLabel:process_medium {
    //     cpus   = { check_max( 6     * Math.pow(2, task.attempt - 1), 'cpus'    ) }
    //     memory = { check_max( 36.GB * Math.pow(2, task.attempt - 1), 'memory'  ) }
    //     time   = { check_max( 8.h   * Math.pow(2, task.attempt - 1), 'time'    ) }
    // }
    // withLabel:process_high {
    //     cpus   = { check_max( 12    * Math.pow(2, task.attempt - 1), 'cpus'    ) }
    //     memory = { check_max( 72.GB * Math.pow(2, task.attempt - 1), 'memory'  ) }
    //     time   = { check_max( 16.h  * Math.pow(2, task.attempt - 1), 'time'    ) }
    // }
    withLabel:process_high {
        cpus   = { 12    * Math.pow(2, task.attempt - 1 ) } 
        memory = { 72.GB * Math.pow(2, task.attempt - 1 ) } 
        time   = { 16.h  * Math.pow(2, task.attempt - 1) } 
    }
    
} 


// Function to ensure that resource requirements don't go beyond
// a maximum limit
// def check_max(obj, type) {
//     if (type == 'memory') {
//         try {
//             if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
//                 return params.max_memory as nextflow.util.MemoryUnit
//             else
//                 return obj
//         } catch (all) {
//             println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
//             return obj
//         }
//     } else if (type == 'time') {
//         try {
//             if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
//                 return params.max_time as nextflow.util.Duration
//             else
//                 return obj
//         } catch (all) {
//             println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
//             return obj
//         }
//     } else if (type == 'cpus') {
//         try {
//             return Math.min( obj, params.max_cpus as int )
//         } catch (all) {
//             println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
//             return obj
//         }
//     }
// }

// Function to ensure that resource requirements don't go beyond

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

// Disable process selector warnings by default. Use debug profile to enable warnings.
nextflow.enable.configProcessNamesValidation = false

/*
def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}
*/

manifest {
    name            = 'nf-whisperx'
    author          = 'mpampuch'
    homePage        = 'https://github.com/mpampuch/nf-whisperx'
    description     = 'Convert video files to MP3 and transcribe using WhisperX'
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.04.0'
    version         = '1.0.0'
    doi             = ''
}